public class AVL1
{
    int isbalanced(Node root)
    {
        if(root == null)
        {
           return 0;
        }
        return height(root.left) - height(root.right);
    }
    int height(Node n)
    {
        if(n == null)
            return 0;
        return n.height;
    }
    int max(int a , int b)
    {
        return (a > b) ? a : b;
    }
    Node root;
    class Node
    {
        int data , height;
        Node right , left;
        Node(int d)
        {
            data = d;
            height = 1;
        }
    }
    Node insert(Node root, int key)
    {
        if(root == null)
            return (new Node(key));
        if(root.data < key)
            root.right = insert(root.right , key);
        else if(root.data > key)
            root.left = insert(root.left , key);
        else return root;
        root.height = 1 + max(height(root.left),height(root.right));

        int balance = isbalanced(root);

        if (balance > 1 && key < root.left.data)
            return rightRotate(root);

        // Right Right Case
        if (balance < -1 && key > root.right.data)
            return leftRotate(root);

        // Left Right Case
        if (balance > 1 && key > root.left.data) {
            root.left = leftRotate(root.left);
            return rightRotate(root);
        }

        // Right Left Case
        if (balance < -1 && key < root.right.data) {
            root.right = rightRotate(root.right);
            return leftRotate(root);
        }
        return root;
    }
    Node leftRotate(Node x)
    {
        Node y = x.right;
        Node T2 = y.left;

        // Perform rotation
        y.left = x;
        x.right = T2;

        //  Update heights
        x.height = max(height(x.left), height(x.right)) + 1;
        y.height = max(height(y.left), height(y.right)) + 1;

        // Return new root
        return y;
    }

    Node rightRotate(Node y)
    {
        Node x = y.left;
        Node T2 = x.right;

        // Perform rotation
        x.right = y;
        y.left = T2;

        // Update heights
        y.height = max(height(y.left), height(y.right)) + 1;
        x.height = max(height(x.left), height(x.right)) + 1;

        // Return new root
        return x;

    }
    void preOrder(Node node) {
        if (node != null) {
            System.out.print(node.data + " ");
            preOrder(node.left);
            preOrder(node.right);
        }
    }
    public static void main(String[] args) {
        AVL1 tree = new AVL1();

        /* Constructing tree given in the above figure */
        tree.root = tree.insert(tree.root, 10);
        tree.root = tree.insert(tree.root, 20);
        tree.root = tree.insert(tree.root, 30);
        tree.root = tree.insert(tree.root, 40);
        tree.root = tree.insert(tree.root, 50);
        tree.root = tree.insert(tree.root, 25);

        /* The constructed AVL Tree would be
             30
            /  \
          20   40
         /  \     \
        10  25    50
        */
        System.out.println("Preorder traversal" +
                " of constructed tree is : ");
        tree.preOrder(tree.root);
    }
}




