public class AVLDeletion1
{
    Node root;
    class Node
    {
        int data , height ;
        Node left ,right;
        Node (int data)
        {
            this.data = data;
            height = 1;
        }
    }
    int isBalanced(Node root)
    {
        if(root == null)
            return 0;
        return height(root.left) - height(root.right);
    }
    int height(Node root)
    {
        if(root == null)
            return 0;
        return root.height;
    }
    int max(int a , int b)
    {
        return a> b ? a : b;
    }
    Node leftRotate(Node x)
    {
        Node y = x.right;
        Node T2 = y.left;

        y.left=  x;
        x.right = T2;

        x.height = max(height(x.left) , height(x.right))+1;
        y.height = max(height(y.left), height(y.left))+1;

        return y;
    }

    Node rightRotate(Node y)
    {
        Node x = y.left;
        Node T2 = x.right;

        x.right = y;
        y.left = T2;

        y.height = max(height(y.right),height(y.left))+1;
        x.height = max(height(x.right),height(x.left))+1;

        return x;
    }
    Node insert(Node root , int key)
    {
        if(root == null)return new Node(key);
        if(root.data > key)
        {
            root.left = insert(root.left , key);
        }
        else if(root.data < key)
            root.right = insert(root.right , key);
        else {
            return root;
        }

        root.height = 1 + height(root.left) + height(root.right);

        int balanced = isBalanced(root);

        if(balanced > 1 && key < root.left.data)
            return rightRotate(root);
        if (balanced < -1 && key > root.right.data)
            return leftRotate(root);
        if(balanced > 1 && key > root.left.data)
        {
            root.left = leftRotate(root.left);
            return rightRotate(root);
        }
        if(balanced < -1 && key < root.right.data)
        {
            root.right = rightRotate(root.right);
            return leftRotate(root);
        }
        return root;
    }
    Node delete(Node root , int key)
    {
        if(root == null)
            return root;
        if(root.data > key)
            root.left = delete(root.left, key);
        else if(root.data < key)
            root.right = delete(root.right, key);
        else
        {
            if(root.left == null)
                return root.right;
            else if (root.right == null) {
                return root.left;
            }
            root.data = minValue(root.right);
            root.right = delete(root.right , root.data);
        }
        root.height = 1+ max(height(root.left) ,height(root.right));
        int balance = isBalanced(root);
        if (balance > 1 && isBalanced(root.left) >= 0)
            return rightRotate(root);

        // Left Right Case
        if (balance > 1 && isBalanced(root.left) < 0)
        {
            root.left = leftRotate(root.left);
            return rightRotate(root);
        }

        // Right Right Case
        if (balance < -1 && isBalanced(root.right) <= 0)
            return leftRotate(root);

        // Right Left Case
        if (balance < -1 && isBalanced(root.right) > 0)
        {
            root.right = rightRotate(root.right);
            return leftRotate(root);
        }

        return root;

    }
    int minValue(Node root)
    {
        if(root.left == null )
            return root.data;
        return minValue(root.left);
    }
    void preOrder(Node node)
    {
        if (node != null)
        {
            System.out.print(node.data + " ");
            preOrder(node.left);
            preOrder(node.right);
        }
    }

    public static void main(String[] args)
    {
        AVLDeletion1 tree = new AVLDeletion1();

        /* Constructing tree given in the above figure */
        tree.root = tree.insert(tree.root, 9);
        tree.root = tree.insert(tree.root, 5);
        tree.root = tree.insert(tree.root, 10);
        tree.root = tree.insert(tree.root, 0);
        tree.root = tree.insert(tree.root, 6);
        tree.root = tree.insert(tree.root, 11);
        tree.root = tree.insert(tree.root, -1);
        tree.root = tree.insert(tree.root, 1);
        tree.root = tree.insert(tree.root, 2);

        /* The constructed AVL Tree would be
          9
        /  \
        1 10
        / \ \
        0 5 11
        / / \
        -1 2 6
        */
        System.out.println("Preorder traversal of "+
                "constructed tree is : ");
        tree.preOrder(tree.root);

        tree.root = tree.delete(tree.root, 10);

        /* The AVL Tree after deletion of 10
        1
        / \
        0 9
        /     / \
        -1 5 11
        / \
        2 6
        */
        System.out.println("");
        System.out.println("Preorder traversal after "+
                "deletion of 10 :");
        tree.preOrder(tree.root);
    }
}
